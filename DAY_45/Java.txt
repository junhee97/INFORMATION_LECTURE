싱글톤 패턴
	디자인 패턴들 중에서 가장 개념적으로 간단한 패턴
	단 하나의 유일 객체를 만들기 위한 패턴


--------------------
객체
--------------------
----------
일반
----------
객체 ? / Instance / 클래스 / JVM 메모리 구조 / ...
객체구성요소
	- 객체 속성 ( 멤버 변수 / 필드 / )
	- 객체 기능 ( 멤버 함수, 생성자 함수 )
	- 함수 오버로딩
	- static ( 관련 디지인 패턴 : 싱클톤 패턴 )

자료구조
	- 배열 ( 원시타입 / 클래스 타입 )
	- Collection ( List, Set, Map.. )


----------
상속
----------
	물려줌 - 계층구조
	상위 ( 부모, Super ) 클래스의 속성과 기능을 하위 ( 자식, Sub ) 클래스에서 
	그대로 물려받아 사용할 수 있도록 허용한 문법

	상위 클래스로부터 속성 / 기능을 물려받은 하위 클래스는 그 외의 속성 / 기능을 추가할 수 있다
	상위 클래스로부터 속성 / 기능을 물려받은 하위 클래스는 물려받은 기능을 고쳐서 사용할 수 있다
	extends 예약어 사용

	상속을 쓰는 이유
	1. 확장성
	2. 유지보수
	3. 가독성
	4. 코드 간결화


메소드 오버라이딩 ( 함수 재정의 )
	상속관계를 전제로 상위클래스의 메소드를 하위 클래스가 재정의(고쳐사용)하는 것을 허용한 문법
	메소드의 헤드부분은 동일하게 두고 본체({})의 로직을 수정하게끔 허용함으로 다양한 형태의
	객체가 형성될 수 있도록 유도(다형성)
	상위클래스로 부터 동일한 메소드를 물려받더라도 각 하위클래스마다 다른 기능구현의 결과물을
	만들어낼 수 있다

오버라이딩
	상속 전제 o
	함수 로직 변경 ( 헤더 고정 )
	다형성을 목적으로 한 문법요소

오버로딩
	상속 전제 x
	함수 헤더 변경 ( 반환자료형 - 고정, 함수명 - 고정, 파라미터 - 변동 )
	개발자의 편의에 중점 ( 함수 이름 단일화 )


