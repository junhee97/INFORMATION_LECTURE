함수 ( function )
	외부로 부터 Data를 받아와 처리하는 논리적 공간

  함수의 형태
	인자 o, 리턴값 o

	인자 x, 리턴값 o

	인자 o, 리턴값 x

	인자 x, 리턴값 x

	기본형태( ES6 이전 )
	  function sum1 ( n1, n2 ) { return n1 + n2 } ;

	기본형태 ( ES6 이후 )
	  const f1 = ( n1, n2 ) => { return n1 + n2 } ;

  인자의 개수
	메모리 허용범위내에서 무제한

  반환값의 개수
	1개

  호이스팅 ( HOISTING )
	변수와 함수의 선언이 코드 실행전에 메모리에 미리 저장되는 현상
	function 예약어 사용시 호이스팅 처리됨
	var 예약어 사용시 호이스팅 처리됨

	var 변수는 가급적 사용 지양 ( 사용하지 않는게 좋음 )
	function 은 목적에 따라 사용여부 결정 ( 처음에 만든 효과를 주고싶으면 사용 )
	function 은 기본으로 이름부여도 가능하다
	화살표함수 ( ( ) => { } ) 는 기본적으로 익명함수로 처리된다

  스코프 ( SCOPE )
	변수나 함수가 접근할 수 있는 범위
	전역스코프 ( Global Scope ) 와 지역스코프 ( Local Scope ) 로 구별
	전역스코프 : 모든 지역에서 접근이 가능
	지역스코프 : 특정 영역 ( { } ) 에서만 접근 가능
		함수스코프 : 함수 내에서 선언된 변수는 해당 함수내에서만 접근 가능 ( var )
		블록스코프 : 블록 내부에서만 접근 가능 ( ex - if, for, while, object, ... ) ( let, const )
		렉시컬 ( Lexical ) 스코프 : 변수를 선언한 위치에 따라서 스코프 결정

  클로저
	내부 함수가 외부 함수의 변수에 접근할 수 있는 것을 의미

	정보은닉 ( Information Hiding )
	  클로저를 사용하여 외부에서 접근할 수 없도록 변수를 보호하고 함수를 통해서만 접근 가능하도록 만들 수 있습니다.
	데이터 보존 ( Data Persistence )
	  클로저를 사용하여 함수가 생성될 당시의 환경을 유지하면서 데이터를 영구적으로 보존할 수 있습니다.
	비동기 처리 ( Asynchronous Operations )
	  클로저를 사용하여 비동기적인 작업에서 결과를 유지하고 필요할 때에 접근할 수 있도록 할 수 있습니다.