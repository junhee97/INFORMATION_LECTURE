동기 & 비동기 ( SYNC & ASYNC )

  동기 ( Synchronous )
	코드가 위에서 아래로 순차적으로 실행
	이전 작업이 끝나야 다음 작업이 실행
	실행 흐름이 직관적이지만 처리시간이 오래 걸리는 작업이 있으면 전체 프로그램이 지연 될 수 있음

  비동기 ( ASynchronous )
	특정 작업이 끝날 때까지 기다리지 않고 다음 코드가 먼저 실행됨
	시간이 오래 걸리는 작업(예 : 네트워크 요청, 파일 읽기, 등)을 수행할 때 유용함
	콜백(callback), 프로미스(Promise), async/await 등을 이용해 처리함

	스크립트 내 코드에서의 동기(약속) : 메인 코드라인(메인Thread)대로 코드를 실행 처리
	스크립트 내 코드에서의 비동기 : 메인 코드라인(메인Thread)에서 분할된 스레드(Worker Thread)에서 독립적으로 코드를 실행 처리
	[주의] 스크립트내에서 스레드를 분할처리하는 것은 실제로 스레드가 분할되는 것은 아니라 그렇게 보이도록(가상) 처리하는 것이다
	[주의] 자바스크립트는 싱글 슽레드 방식을 사용, 실제로 스레드를 나눌수는 없다

	async, await - 비동기처리 순서를 지정
	async 예약어 : 해당 함수가 비동기적인 처리를 하는 프로세스임을 암시
	await 예약어 : async 블럭 내부에서 사용되며 비동기 작업이 완료시까지 대기하는 예약어


동기 ( 약속 )
	- javascript : 절차대로 처리 ( Main Thread )
	- network : 속도 / 데이터 단위 / 혼잡 제어에 대한 약속
	- web server : 한 페이지당 한번에 하나의 요청 / 응답 흐름

비동기
	- javascript : 절차를 지키지 않음 ( Worker Thread 생성 후 독자적으로 처리 - 실제로 스레드를 나누진 않음 )
	- netwokr : 미리 만들어 놓은 약속대로 데이터 전송을 하지않고 임의로 지정한대로 전송
	- web server : 한 페이지당 여러개의 요청 / 여러개의 응답 ( xhr, promise, fetch, ajax, axios, ... )

스레드
	코드를 처리하는 실행 흐름

비동기 처리간 우선순위
	- async ( 함수의 헤더에 부여 )
	- await ( 함수 내 비동기 처리 로직에 부여 )